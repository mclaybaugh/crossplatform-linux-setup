#!/bin/sh
# Author: Michael Claybaugh
# Date created: Friday, Apr 13, 2018
# Description: Bash shell script for automating the setup of my prefered linux
#              programs and settings
#**************************************************************
# Section 1: Installation of software
#**************************************************************

echo "Apt Install norms for Ubuntu? [y/N]: "
read wantsUbuntuNorms
if [ "$wantsUbuntuNorms" = "y" ]; then
  sudo apt install build-essential curl git npm nodejs ranger docker \
      docker-compose php cifs-utils xclip
  sudo systemctl start docker
  sudo systemctl enable docker
fi

T="MCSetup:"

echo "Install discord deb? [y/N]: "
read wantsDiscord
if [ "$wantsDiscord" = "y" ]; then
  echo "$T Downloading release from discord..."
  curl -Lo discord.deb https://discordapp.com/api/download?platform=linux&format=deb
  echo "$T Installing"
  sudo dpkg -i discord.deb
  echo "$T Removing installation file"
  rm -v discord.deb
fi

echo "Install vscodium 1.35.1 from github? [y/N]: "
read wantsVscodium
if [ "$wantsVscodium" = "y" ]; then
  echo "$T Downloading release from Github..."
  curl -Lo vscodium.deb https://github.com/VSCodium/vscodium/releases/download/1.35.1/codium_1.35.1-1560422401_amd64.deb
  echo "$T Installing"
  sudo dpkg -i vscodium.deb
  echo "$T Removing installation file"
  rm -v vscodium.deb
fi

echo "Install ripgrep 11.0.1 from github? [y/N]: "
read wantsRipgrep
if [ "$wantsRipgrep" = "y" ]; then
  echo "$T Downloading release from Github..."
  curl -LO https://github.com/BurntSushi/ripgrep/releases/download/11.0.1/ripgrep_11.0.1_amd64.deb
  echo "$T Installing"
  sudo dpkg -i ripgrep_11.0.1_amd64.deb
  echo "$T Removing installation file"
  rm -v ripgrep_11.0.1_amd64.deb
fi

echo "Clone and build neovim? [y/N]: "
read wantsNeovim
if [ "$wantsNeovim" = "y" ]; then
    echo "$T Install prerequisites..."
    sudo apt install ninja-build gettext libtool libtool-bin autoconf automake cmake g++ pkg-config unzip
    echo "$T Clone repository..."
    git clone https://github.com/neovim/neovim ../neovim
    echo "$T Build and install..."
    cd ../neovim || exit
    make CMAKE_EXTRA_FLAGS="-DCMAKE_INSTALL_PREFIX=$HOME/neovim" CMAKE_BUILD_TYPE=Release
    make install
    cd ../linux-setup || exit
fi

# clone standard repos
echo "git clone the normal repos? [y/N]: "
read wantsGitClone
if [ "$wantsGitClone" = "y" ]; then
    git clone https://github.com/magicmonty/bash-git-prompt ../bash-git-prompt
fi

echo "Install Vim-Plug? [y/N]: "
read wantsVimPlug
if [ "$wantsVimPlug" = "y" ]; then
  curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs \
    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  echo "After this setup, open Vim and type :PlugInstall"
fi

echo "Install eslint from npm? [y/N]: "
read wantsEslint
if [ "$wantsEslint" = "y" ]; then
  sudo npm install --global eslint
fi

#read -p "Install python? [y/N]: " wantsPython
#if [ "$wantsPython" == "y" ]; then
#  sudo apt install python python-dev python-pip python3 python3-dev python3-pip
#fi

#read -p "Pacman -Syu norms for Manjaro? [y/N]: " installManjaroNorms
#if [ "$installManjaroNorms" == "y" ]; then
#  installManjaroNorms
#  sudo pacman -Syu fzf ripgrep ranger fish snapd docker docker-compose
#fi

# To connect to SQL Server
#sudo apt install freetds unixodbc unixodbc-dev

#*************************************************************
# Section 3: Updating config files in home directory
#**************************************************************

VIM_CONFIG_DIR=~/.config/nvim
echo "Update configs for bash, eslint, and nvim? [y/N]: "
read wantsConfig
if [ "$wantsConfig" = "y" ]; then
  cp -v config/bashrc "$HOME/.bashrc"
  cp -v config/git-prompt-colors.sh "$HOME/.git-prompt-colors.sh"
  cp -v config/eslintrc.json "$HOME/.eslintrc.json"
  if [ ! -d "$VIM_CONFIG_DIR" ]; then
    mkdir $VIM_CONFIG_DIR
  fi
  cp -v config/vimrc "$VIM_CONFIG_DIR/init.vim"
fi

echo "Setup git config name and email? [y/N]: "
read wantsSetupGit
if [ "$wantsSetupGit" = "y" ]; then
  git config --global user.name "Michael Claybaugh"
  git config --global user.email "mclaybaugh2@liberty.edu"
fi

echo "Set permissions of ssh folder? [y/N]: "
read wantsSshPerms
if [ "$wantsSshPerms" = "y" ]; then
  sudo chmod -v 700 ~/.ssh
  sudo chmod -v 644 ~/.ssh/id_rsa.pub
  sudo chmod -v 600 ~/.ssh/id_rsa
  sudo chmod -v 600 ~/.ssh/config
fi

echo "Set Bash to be case insensitive? [y/N]: "
read wantsBashCaseFix
if [ "$wantsBashCaseFix" = "y" ]; then
  # If ~/.inputrc doesn't exist yet: First include the original /etc/inputrc
  # so it won't get overriden
  if [ ! -e ~/.inputrc ]; then echo 'source /etc/inputrc' > ~/.inputrc; fi

  # Add shell-option to ~/.inputrc to enable case-insensitive tab completion
  echo 'set completion-ignore-case On' >> ~/.inputrc
fi

# Getting nvm to work with fish
# 1. install fisher
#curl https://git.io/fisher --create-dirs -sLo ~/.config/fish/functions/fisher.fish
# 2. install bass
#fisher add edc/bass
# 3. add function to ~/.config/fish/functions/nvm.fish
#function nvm
#  bass source ~/.nvm/nvm.sh --no-use ';' nvm $argv
#end
